{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/ContactList/contactList.module.css","components/Filter/filter.module.css","components/Loader/Loader.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Loader/Loader.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","fetchContact","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","name","phone","post","deleteContact","contactId","delete","id","items","createReducer","operations","fulfilled","payload","state","filter","contact","loading","pending","rejected","actions","combineReducers","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","getItems","getValue","getLoading","getVisibleContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setPhone","useSelector","dispatch","useDispatch","nameInputId","shortid","generate","phoneInputId","handleChange","e","target","value","reset","className","styles","contactForm","onSubmit","preventDefault","find","repeatName","alert","htmlFor","type","pattern","title","required","onChange","contactName","contactNumber","btn","Loader","loader","color","height","width","timeout","ContactList","isLoading","console","log","useEffect","length","contactList","map","contactList__item","onClick","Filter","label","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b7cc3a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"contactForm_contactForm__EqUx4\",\"contactName\":\"contactForm_contactName__sZwEg\",\"contactNumber\":\"contactForm_contactNumber__fOvh3\",\"btn\":\"contactForm_btn__Llsto\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"contactList_btn__2cu3P\",\"contactList\":\"contactList_contactList__239wh\",\"contactList__item\":\"contactList_contactList__item__EoPJn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"filter_filter__3w26t\",\"label\":\"filter_label__83VhI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1YbBq\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction('contacts/addContactsRequest');\r\nconst addContactSuccess = createAction('contacts/addContactsSuccess');\r\nconst addContactError = createAction('contacts/addContactsError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactsRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactsSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactsError');\r\n\r\nconst changeFilter = createAction('contacts/filter');\r\n\r\nexport default {addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, changeFilter}\r\n","import axios from \"axios\";\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n// import actions from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = 'https://619266d1aeab5c0017105fd2.mockapi.io';\r\n\r\nconst fetchContact = createAsyncThunk(\r\n    'contacts/fetchContact',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.get('/contacts');\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nconst addContact = createAsyncThunk(\r\n    'contacts/addContact',\r\n    async ({ name, phone }, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.post('/contacts', { name, phone });\r\n            return data;\r\n        } catch (error) {\r\n            rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nconst deleteContact = createAsyncThunk(\r\n    'contacts/deleteContact',\r\n    async (contactId, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.delete(`/contacts/${contactId}`);\r\n            return data.id;\r\n        } catch (error) {\r\n            rejectWithValue(error);\r\n        }\r\n    },\r\n);\r\n\r\nexport default { addContact, deleteContact, fetchContact };\r\n\r\n// const deleteContact = id => dispatch => {\r\n//     dispatch(actions.deleteContactRequest());\r\n\r\n//     axios\r\n//         .delete(`/contacts/${id}`)\r\n//         .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n//         .catch(error => dispatch(actions.deleteContactError(error)));\r\n// }\r\n\r\n// const addContact = (name, phone) => dispatch => {\r\n//     const contact = { name, phone };\r\n\r\n//     dispatch(actions.addContactRequest());\r\n\r\n//     axios\r\n//         .post('/contacts', contact)\r\n//         .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n//         .catch(error => dispatch(actions.addContactError(error)));\r\n// };\r\n\r\n\r\n// const fetchContact = () => async dispatch => {\r\n//     dispatch(fetchContactRequest());\r\n\r\n//     try {\r\n//         const { data } = await axios.get('/contacts');\r\n//         dispatch(fetchContactSuccess(data));\r\n//     } catch (error) {\r\n//         dispatch(fetchContactError(error))\r\n//     }\r\n//     // axios\r\n//     //     .get('/contacts')\r\n//     //     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     //     .catch(error => dispatch(fetchContactError(error)));\r\n// }\r\n\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-actions\";\r\nimport operations from \"./contacts-operations\";\r\n\r\nconst items = createReducer([], {\r\n    [operations.fetchContact.fulfilled]: (_, { payload }) => payload,\r\n    [operations.addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n    [operations.deleteContact.fulfilled]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [operations.fetchContact.pending]: () => true,\r\n    [operations.fetchContact.fulfilled]: () => false,\r\n    [operations.fetchContact.rejected]: () => false,\r\n    [operations.addContact.pending]: () => true,\r\n    [operations.addContact.fulfilled]: () => false,\r\n    [operations.addContact.rejected]: () => false,\r\n    [operations.deleteContact.pending]: () => true,\r\n    [operations.deleteContact.fulfilled]: () => false,\r\n    [operations.deleteContact.rejected]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, {payload}) => payload,\r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n}) ","import logger from 'redux-logger';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport {\r\n//   persistStore,\r\n//   persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER, } from 'redux-persist';\r\n\r\n// const contactsPersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// }\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        // contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }).concat(logger),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n\r\n// const persistor = persistStore(store);\r\n// export default {store, persistor};\r\n\r\n","import { createSelector } from \"reselect\";\r\n\r\nexport const getItems = state => state.contacts.items;\r\nexport const getValue = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getItems, getValue],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  }\r\n)\r\n\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const allContacts = getItems(state);\r\n//     const filter = getValue(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//     return allContacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\nimport operations from \"../../redux/contacts/contacts-operations\";\nimport { getItems } from \"../../redux/contacts/contacts-selectors\";\nimport styles from \"./contactForm.module.css\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  const nameInputId = shortid.generate();\n  const phoneInputId = shortid.generate();\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const repeatName = name => items.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n    if (repeatName(name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(operations.addContact({ name, phone }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n  \n  return (\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          id={nameInputId}\n          className={styles.contactName}\n        />\n      </label>\n      <label htmlFor={phoneInputId}>Number\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          id={phoneInputId}\n          className={styles.contactNumber}\n        />\n      </label>\n      <button type=\"submit\" className={styles.btn}>Add contact</button>\n    </form>\n  );\n}\n","import Spinner from \"react-loader-spinner\";\r\nimport styles from './Loader.module.css';\r\n\r\nconst Loader = () => (\r\n  <div className={styles.loader}>\r\n    <Spinner type=\"ThreeDots\"\r\n        color=\"#3c8092\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000} />\r\n  </div>\r\n);\r\nexport default Loader;","// import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./contactList.module.css\";\nimport operations from \"../../redux/contacts/contacts-operations\";\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selectors\";\nimport { useEffect } from \"react\";\nimport { getLoading } from \"../../redux/contacts/contacts-selectors\";\nimport Loader from \"../Loader/Loader\";\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n   const isLoading = useSelector(getLoading);\n   console.log(isLoading);\n\n  useEffect(() => {\n    dispatch(operations.fetchContact());\n  }, [dispatch]);\n\n  \n  return (\n    <>\n      {isLoading && <Loader />}\n      {contacts.length > 0 &&\n        <ul className={styles.contactList}>\n          {contacts.map(({ id, name, phone }) => (\n        <li key={id} className={styles.contactList__item}>\n          {name}: {phone}\n          <button\n            type=\"button\"\n            onClick={() => dispatch(operations.deleteContact(id))}\n            className={styles.btn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n      </ul>\n      }\n    </>\n  );\n}\n","// import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport actions from \"../../redux/contacts/contacts-actions\";\nimport { getValue } from \"../../redux/contacts/contacts-selectors\";\nimport styles from \"./filter.module.css\";\n\nexport default function Filter() {\n  const value = useSelector(getValue);\n  const dispatch = useDispatch();\n  return (\n    <label className={styles.filter}>\n      <span className={styles.label}>Find contacts by name</span>\n      <input type=\"text\" value={value} onChange={(e) => dispatch(actions.changeFilter(e.target.value))}></input>\n    </label>\n  );\n}\n","import \"./App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>      \n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n  \n}\n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport  store  from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store.store}> */}\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>    \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}